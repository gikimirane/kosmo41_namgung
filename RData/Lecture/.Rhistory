library(readxl)
df_excel<-read_excel("D:\\yh9189\\Study\\RData\\RData\\excel_exam.xlsx")
df_excel
df_excel2<-read_excel("D:/yh9189/Study/RData/RData/excel_exam.xlsx")
df_excel2
df_excel_novar <- read_excel("../RData/excel_exam_novar.xlsx")
df_excel_novar
df_excel_novar2 <- read_excel("../RData/excel_exam_novar.xlsx",col_names = F)   #상대 경로로 함
df_excel_novar2
df_excel_sheet <- read_excel("../Rdata/excel_exam_sheet.xlsx",sheet=3)
df_excel_sheet
df_excel_sheet <- read_excel("../Rdata/excel_exam_sheet.xlsx",sheet=3)
df_excel_sheet
df_exam <- read_excel("../Rdata/excel_exam_sheet.xlsx",col_names = F,sheet=3)
df_examexcel_exam_sheet.xlsx
df_exam
df_csv_exam1 <- read.csv("../RData/csv_exam.csv")
df_csv_exam1
df_csv_exam2 <- read.csv("../RData/csv_exam.csv",stringAsFactors=F)
df_csv_exam2 <- read.csv("../RData/csv_exam.csv",stringsAsFactors = F)
df_csv_exam2
df_csv_exam2 <- read.csv("../RData/csv_exam2.csv")
df_csv_exam2 <- read.csv("../RData/csv_exam2.csv",stringsAsFactors = F)
df_csv_exam2
df_csv_exam2
df_csv_exam2 <- read.csv("../RData/csv_exam2.csv",stringsAsFactors = F)
df_csv_exam2
write.csv(df_csv_exam1,file="df_csv_exam_re.csv")
df_csv_exam1 <- read.csv("../RData/csv_exam.csv")
write.csv(df_csv_exam1,file="df_csv_exam_re.csv")
write.csv(df_csv_exam1,file="../RData/df_csv_exam_re.csv")
save(df_csv_exam1, file="../RData/df_csv_exam_re.rda")
rm(df_csv_exam1)
df_csv_exam1
load("../RData/df_csv_exam_re.rda")
View(df_csv_exam2)
df_csv_exam1
df_exam <- read.csv("../RData/csv_exam.csv")
head(df_exam)
head(df_exam,10)
tail(df_exam)
df_csv_exam <- read.csv("../RData/csv_exam.csv")
df_csv_exam <- read.csv("../RData/csv_exam.csv")
head(df_csv_exam)
head(df_csv_exam,10)
tail(df_csv_exam)
tail(df_csv_exam)
tail(df_csv_exam)
tail(df_csv_exam,10)
# 데이터 뷰어 창에서 데이터 출력
View(df_csv_exam1)
# 데이터 뷰어 창에서 데이터 출력
View(df_csv_exam1)
# 앞에서부터 6행까지 출력, Default
df_csv_exam1 <- read.csv("../RData/csv_exam.csv")
head(df_csv_exam1)
# 앞에서부터 10행까지 출력
head(df_csv_exam1,10)
# 뒤에서부터 6행까지 출력, Default
tail(df_csv_exam1)
tail(df_csv_exam1,10)
# 데이터 뷰어 창에서 데이터 출력
View(df_csv_exam1)
dim(df_scv_exam1)
# 데이터가 몇 행, 몇 열로 구성되어 있는지 알아보기
dim(df_csv_exam1)
str(df_csv_exam1)
# 요약 통계량 산출
summary(df_csv_exam1)
library("ggplot2")
mpg <- as.data.frame(ggplot::mpg)
library("ggplot2")
mpg <- as.data.frame(ggplot::mpg)
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
mpg <- as.data.frame(ggplot::mpg)
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mpg <- as.data.frame(ggplot::mpg)
library("ggplot2")
mpg <- as.data.frame(ggplot::mpg)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
tail(mpg)
View(mpg)
dim(mpg)
str(mpg)
summary(mpg)
df_var_change1 <- data.frame(var51<-c(1,2,3),
var51<-c(2,3,2))
#데이터 프레임 생성
df_var_change1 <- data.frame(var51= c(1,2,3),
var51=c(2,3,2))
df_var_change1 <- data.frame(var51= c(1,2,3),
var52=c(2,3,2))
install.packages("dplyr")
library(dplyr)
df_var_change2 <- df_var_change1
df_var_change2 <- rename(df_var_change2,v2=var52)
df_var_change2
# 변수명 바꾸면서 새로운 데이터 프레임 만들기
df_var_change3 <- rename(df_var_change1,v2=var52)
mpg <- as.data.frame(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
mpg
mpg1 <- mpg
mpg1 <- rename(mpg1,cty=city)
mpg1 <- rename(mpg1,city=cty)
mpg1 <- rename(mpg1,highway=hwy)
mpg1
mpg1 = head()
head(mpg1)
str(mpg1)
mpg1
#데이터 프레임 만들기
df_var_derived <- data.frame(var51 = c(4,3,8),
var51 = c(2,6,1))
df_var_derived
#데이터 프레임 만들기
df_var_derived <- data.frame(var51 = c(4,3,8),
var51 = c(2,6,1))
df_var_derived
#데이터 프레임 만들기
df_var_derived <- data.frame(var51 = c(4,3,8),
var52 = c(2,6,1))
#합계를 구하는 파생 변수
df_var_derived$var_sum <- df_var_derived$var51 + df_var_derived$var52
df_var_derived
df_var_derived$var_mean <- (df_var_derived$var51+df_var_derived$var52)/2
df_var_derived
mpg <- as.data.frame(ggplot2::mpg)
mpg1 <- mpg
mpg1 <- rename(mpg1,city=cty)
mpg1 <- rename(mpg1,highway=hwy)
df_var_derived
mpg1$total <- (mpg1$city+mpg1$highway)/2
mpg1
head(mpg1)
# 조건문을 이용해 파생 변수 만들기
summary(mpg1)
# 조건문을 이용해 파생 변수 만들기
summary(mpg1$total)
hist(mpg1$total)
ifelse(mpg1$total,"pass","fail")
mpg1$test<-ifelse(mpg1$total,"pass","fail")
mpg1$test<-ifelse(mpg1$total,"pass","fail")
head(mpg1)
qplot(mpg1)
qplot(mpg1)
library(pplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(dplyr)
qplot(mpg1)
qplot(mpg1$test)
mpg1$grade <- ifelse(mpg1$total >=30,"A",
ifelse(mpg1$total) >=20,"B","A")
head(mpg1)
mpg1$grade <- ifelse(mpg1$total>=30,"A",
ifelse(mpg1$total) >=20,"B","C")
mpg1$grade <- ifelse(mpg1$total>=30,"A",
ifelse(mpg1$total>=20,"B","C"))
head(mpg1)
table(mpg1$grade)
# 등급 빈도 막대 그래프 생성
qplot(mpg1$grade)
mpg1$grade2 <- ifelse(mpg1$total>=30,"A",
ifelse(mpg1$total>=25,"B",
ifelse(mpg1$total>=20,"C","D")))
table(mpg2$grade)
table(mpg1$grade2)
qplot(mpg1$grade2)
exam <- read.csv("../RData/csv_exam.csv")
exam
head(exam)
# 단축키 ctrl+shift+m = %>%
# exam 에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class==1)
# 2반인 경우만 추출한다면?
exam %>% filter(class==2)
# 1반이 아닌 경우만 추출
exam %>% filter(class!=1)
# 3반이 아닌 경우만 추출
exam %>% filter(class!=3)
# 3반보다 작은 경우
exam %>% filter(class >=3)
# 3반보다 작은 경우
exam %>% filter(class <3)
# 3반보다 작은 경우
exam %>% filter(class<3)
#수학점수가 50점 초과한 경우
exam %>% filter(math >50)
#수학점수가 50점 초과한 경우
exam %>% filter(math > 50)
# 수학점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어점수가 80점 이상인 경우
exam %>% filter(english >=80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <=80)
# and - 여러 조건을 충족하는 행 추출하기
exam %>% filter(class==1 & math>=50)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class==2 $ english >=80)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class==2 $ english >=80)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class==2 $ english>=80)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class==2 & english>=50)
# or - 여러 조건 중 하나 이상 충족하는 행 추출
# 수학점수가 90점 이상이거나, 영어점수가 90점 이상인 경우
exam %>% filter(math>=90 | english>=90)
# 영어 점수가 90점 미만이거나, 과학점수가 50점 미만인 경우
exam %>% filter(english<90 | science<50)
# 목록에 해당하는 행 추출하기
exam %>% filter(class==1 | class==3 | class==5)
# in기호 활용
exam %>% filter(class %in% c(1,3,5))
mean(class1$math)
class1 <- exam %>% filter(class==1)
class2 <- exam %>% filter(class==2)
mean(class1$math)
3/2
3%/%2
3%%3
exam %>% select(math)
exam %>% select(select,math)
exam %>% select(class,math)
exam %>% select(english)
# 변수 추출하기
# 반이랑 수학점수만 보여주기
exam %>% select(class,math>50)
# 변수 제외하기
exam %>% select(-math)
#여러개 제거하기
exam %>% select(-math,-english)
#dplyr 함수 조합하기
exam %>% filter(class==1) %>% select(english)
#dplyr 함수 조합하기
exam %>% filter(class==1) %>% select(english)
#dplyr 함수 조합하기
exam %>% filter(class==1) %>% select(class,english)
#dplyr 함수 조합하기
exam %>% filter(class==1) %>%
select(class,english)
# math 내림차순 정렬
exam %>% arrange(desc(math))
# math 오름차순 정렬
exam %>% arrange(math)
# class 는 오름차순, math는 내림차순
exam %>% arrange(class,desc(math))
# class 는 오름차순, math는 내림차순
exam %>% arrange(class,desc(math))
# 파생변수 추가하기
exam %>%
mutate(total=math+english+science) %>%
head
exam %>%
mutate(total=math+english+science,
mean=(math+english+science)/3) %>% head
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
head
# 중간고사 데이터 생성
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85) )
# 기말고사 데이터 생성
test2 <- data.frame(id=c(1,2,3,4,5),
final =c(70,83,65,95,80) )
total <-left_join(test1,test2, by ="id")
total
# 기말고사 데이터 생성
test2 <- data.frame(id=c(1,2,3,4,6),
final =c(70,83,65,95,80) )
total <-left_join(test1,test2, by ="id")
total
# 중간고사 데이터 생성
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85) )
# 기말고사 데이터 생성
test2 <- data.frame(id=c(1,2,3,4,5),
final =c(70,83,65,95,80) )
total <-left_join(test1,test2, by ="id")
total
# 기존 데이터에 선생님 데이터 추가하기
name <- data.frame(class=c(1,2,3,4,5),
teader=c("kim","lee","park","choi","jung"))
exam_new <- left_join(exam,name,by="class")
exam_new
## 세로로 데이터 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id=c(1,2,3,4,5),
test=c(60,80,70,90,85) )
group_b <- data.frame(id=c(6,7,8,9,10),
test=c(70,83,65,95,80))
group_all <- bind_rows(group_a,group_b)
group_all
# 결측치가 포함된 데이터 프레임 생성
df <- data.frame(sex=c("M","F",NA,"M","F"),
score=c(5,4,3,4,NA) )
df
is.na(df)
table(is.na(df))
#sex 결측치 빈도 출력
table(is.na(df$sex))
#score 결측치 빈도
table(is.na(df$score))
#평균산출
mean(df$score)
## score가 NA인 데이터만 출력
df %>% filter(is.na(score))
# score 결측치 제거
df %>% filter(!is.na(score))
# score 평균산출
mean(df_nomiss$score)
df_nomiss <- df %>% filter(!is.na(score))
# score 평균산출
mean(df_nomiss$score)
#score 합계 산출
sum(df_nomiss$score)
# score,sex 결측치 제거
df_nomiss <- df %>% filter(!is.na(score) | !is.na(sex))
df_nomiss
# score,sex 결측치 제거
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
exam <- read.csv("../RData/csv_exam2.csv",fileEncoding = "UTF-8")
exam
exam[c(3,8,15),"math"]<-NA
exam
is.na(exam)
table(is.na(exam))
# math 평균산출
exam %>% summarise(mean_math =mean(math))
# math 평균산출
exam %>% summarise(mean_math =mean(math))
# math 결측치 제외하고 평균 산출
exam %>% summarise(mean_math =mean(math,na.rm=T))
exam %>% summarise(mean_math=mean(math,na.rm=T),
sum_math=sum(math,na.rm=T),
median_math = median(math,na.rm=T))
# math가 NA면 평균값으로 결측치를 대체 : 55점
exam$math<-ifelse(is.na(exam$math),55,exam$math)
table(is.na(exam$math))
# 이상치 제거하기
outlier <- data.frame(sex=c(1,21,3,2,1),
score=c(5,4,3,4,2,6))
# 이상치 제거하기
outlier <- data.frame(sex=c(1,2,1,3,2,1),
score=c(5,4,3,4,2,6)
)
oytlier
oytlier
outlier
table(outlier$sex)
# 이상치 값을 결측 처리하기 : sex가 3이면 na 할당
outlier$sex = ifelse(outlier$sex==3,NA,outlier$sex)
# 결측 확인하기
table(outlier$sex)
table(outlier$score)
# 이상치 값을 결측 처리하기 : sex가 3이면 na 할당
outlier$sex = ifelse(outlier$sex==3,NA,outlier$sex)
# 결측 확인하기
table(outlier$sex)
outlier
# 이상치 값을 결측 처리하기 : score가 5보다 크면 na 할당
outlier$sex = ifelse(outlier$score>5,NA,outlier$score)
# 이상치 제거하기
outlier <- data.frame(sex=c(1,2,1,3,2,1),
score=c(5,4,3,4,2,6)
)
# 이상치 값을 결측 처리하기 : sex가 3이면 na 할당
outlier$sex = ifelse(outlier$sex==3,NA,outlier$sex)
# 이상치 값을 결측 처리하기 : score가 5보다 크면 na 할당
outlier$score = ifelse(outlier$score>5,NA,outlier$score)
outlier
library(dplyr)
# 결측치 제거하여 최종적으로 이상치 정제하기
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score=mean(score))
library(ggplot2)
View(mpg)
mpg <- as.data.frame(ggplot2::mpg)
mpg
# x축은 displ, y축 hwy로 지정해 배경 생성
ggplot2(data=mpg, aes(x=displ, y=hwy))
# x축은 displ, y축 hwy로 지정해 배경 생성
ggplot(data=mpg, aes(x=displ, y=hwy))
# 배경에 산점도 추가
ggplot(data=mpg,aes(x=displ,y=hwy))+geom_point()
# x축 범위를 3~6으로 지정
ggplot(data=mpg,aes(x=displ,y=hwy))+geom_point()+xlim(3,6)
# y축 범위를 10~30으로 지정
ggplot(data=mpg,aes(x=displ,y=hwy))+
geom_point()+
xlim(3,6)+
ylim(10,30)
# 집단간 평균 표 만들기
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
ggplot(data=df_mpg, aes(x=drv, y=mean_hwy))+geom_col()
ggplot(data=df_mpg,aes(x=reorder(drv,-mean_hwy), y=mean_hwy))+geom_col()
# 크기 순으로 정렬하기
# - 막대는 기본적으로 범주의 알파벳 순서로 정렬 됨
# 정렬기준 변수 앞에 - 기호를 붙히면 내림차순으로 정렬 됨
ggplot(data=df_mpg,aes(x=reorder(drv,mean_hwy), y=mean_hwy))+geom_col()
ggplot(data=df_mpg,aes(x=reorder(drv,-mean_hwy), y=mean_hwy))+geom_col()
# 빈도 막대 그래프 만들기
# y축 없이 x축만 지정하고 geom_col()대신에 geom_bar()를 사용한다.
ggplot(data=mpg,aes(x=drv))+geom_bar()
ggplot(data=ecnomics,aes(x=date,y=unemploy))+geom_line()
ggplot(data=economics,aes(x=date,y=unemploy))+geom_line()
Sys.getlocale()
Sys.getenv("JAVA_HOME")
install.packages("rJava")
install.packages("memoise")
install.packages("KoNLP")
library(KoNLP)
library(dplyr)
useNIADic()
txt <- readline("../RData/hiphop.txt")
txt <- readline("../RData/hiphop.txt")
txt <- readlines("../RData/hiphop.txt")
txt <- readLines("../RData/hiphop.txt")
head(txt)
txtData <- readLines("../RData/hiphop.txt")
head(txt)
head(txtData)
txtData <- readLines("../RData/hiphop.txt")
head(txtData)
tail(txtData)
install.packages("stringr")
install.packages("stringr")
library(rJava)
library(KoNLP)
library(dplyr)
library(stringr)
useNIADic()
# 특수문자 제거
txtData <- str_replace_all(txtData,"\\w"," ")
head(txtData)
tail(txtData)
txtData <- readLines("../RData/hiphop.txt")
head(txtData)
tail(txtData)
# 특수문자 제거
txtData <- str_replace_all(txtData,"\\W"," ")
head(txtData)
tail(txtData)
# 명사 추출하기
extractNoun("동해물과 백두산이 마르고 닳도록 하느님이")
# 가사에서 명사 추출하기
extractNoun(txtData)
# 가사에서 명사 추출하기
nouns<-extractNoun(txtData)
# 추출한 명사 list를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <-table(unlist(nouns))
# 추출한 명사 list를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <-table(unlist(nouns))
wordcount
head(wordcount)
tail(wordcount)
df_word <- as.data.frame(wordcount,stringsAsFactors = F)
df_word <-rename(df_word,
word=Var1,
freq = Freq)
# 두글자 이상 단어 추출
df_word <- filter(df_word,nchar(word)>=2)
df_word
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
pal<-brewer.pal(8,"Dark2")
set.seed(1234)
wordcloud(words=df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per=1,
scale=c(4,0.3),
colors=pal)
wordcloud(words=df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per=.1,
scale=c(4,0.3),
colors=pal)
wordcloud(words=df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per=.1,
scale=c(4,0.3),
colors=pal)
